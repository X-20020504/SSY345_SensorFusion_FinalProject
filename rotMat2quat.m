function q = rotMat2quat(Q)
% 将旋转矩阵转换为单位四元数 [q0, q1, q2, q3]
% 输入 Q 应为 3x3 旋转矩阵（正交且行列式为1）
% 输出 q 是四元数向量 [q0, q1, q2, q3]

% 提取矩阵元素
m11 = Q(1,1); m12 = Q(1,2); m13 = Q(1,3);
m21 = Q(2,1); m22 = Q(2,2); m23 = Q(2,3);
m31 = Q(3,1); m32 = Q(3,2); m33 = Q(3,3);

% 计算四元数分量的平方（并确保非负）
w2 = max(0, (1 + m11 + m22 + m33) / 4);  % q0^2
x2 = max(0, (1 + m11 - m22 - m33) / 4);  % q1^2
y2 = max(0, (1 - m11 + m22 - m33) / 4);  % q2^2
z2 = max(0, (1 - m11 - m22 + m33) / 4);  % q3^2

% 找出最大的平方分量
[~, idx] = max([w2, x2, y2, z2]);

% 根据最大分量选择计算路径
switch idx
    case 1  % q0 最大
        q0 = sqrt(w2);
        q1 = (m32 - m23) / (4 * q0);
        q2 = (m13 - m31) / (4 * q0);
        q3 = (m21 - m12) / (4 * q0);
    case 2  % q1 最大
        q1 = sqrt(x2);
        q0 = (m32 - m23) / (4 * q1);
        q2 = (m21 + m12) / (4 * q1);
        q3 = (m13 + m31) / (4 * q1);
    case 3  % q2 最大
        q2 = sqrt(y2);
        q0 = (m13 - m31) / (4 * q2);
        q1 = (m21 + m12) / (4 * q2);
        q3 = (m32 + m23) / (4 * q2);
    case 4  % q3 最大
        q3 = sqrt(z2);
        q0 = (m21 - m12) / (4 * q3);
        q1 = (m31 + m13) / (4 * q3);
        q2 = (m32 + m23) / (4 * q3);
end

q = [q0; q1; q2; q3];

% 确保标量部分 q0 非负（可选，保持一致性）
if q0 < 0
    q = -q;
end

% 归一化四元数以消除数值误差
q = q / norm(q);
end